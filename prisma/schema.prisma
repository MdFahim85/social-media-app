datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio String?
  banner String?
  location String?
  birthday DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  reposts Repost[]
  comments Comment[]
  likes Like[]
  commentLike CommentLike[]
  followers Follows[] @relation("following")
  following Follows[] @relation("followers")
  notifications Notification[] @relation("userNotifications")
  notificationCreated Notification[] @relation("notificationCreator")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  images String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorId] , references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]
  reposts Repost[] @relation("PostReposts")
}

model Repost {
  id String @id @default(cuid())
  authorId String
  postId String
  notifications Notification[]
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation("PostReposts", fields : [postId], references: [id], onDelete: Cascade)
  
  @@unique([authorId,postId])
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  parentId String?
  postId String
  notifications Notification[]
  commentLike CommentLike[]

  createdAt DateTime @default(now())


  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")


  @@index([authorId,postId])
}


model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  authorId  String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
  author  User    @relation(fields: [authorId], references: [id])

  @@unique([commentId, authorId])
}


model Like{
  id String  @id @default(cuid())
  postId String
  authorId String
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId,postId])
  @@unique([authorId, postId])
}

model Follows{
  followerId String 
  followingId String
  createdAt DateTime @default(now())
  
  follower User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@index([followerId, followingId])
  @@id([followerId, followingId])

}

enum NotificationType {
  LIKE
  COMMENT
  ID
  REPOST
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  repostId String?
  createdAt DateTime @default(now())

  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  repost Repost? @relation(fields: [repostId], references: [id], onDelete: Cascade)


  @@index([userId, createdAt])
}